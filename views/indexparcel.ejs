<header>
  <div class="container">
    <nav>

      <ul class="menu" style="width: 20%;
      justify-content: space-between;
      list-style: none;
      display: flex;
      text-align: end;
      a {
        text-decoration: none;
        color: #333;
        transition: .4s;
        border-bottom: 2px solid transparent;
        padding-bottom: .5em;}
        
        &:hover { 
        padding-bottom:0;
        border-bottom: 2px solid #333;
        }">
        <li><a href=\>Home</a></li>
        <li><a href='C:\Users\PC\Desktop\senior\web map\views\about.ejs'>About</a></li>
      </ul>
    </nav>
  </div>
</header>

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta http-equiv="X-UA-Compatible" content="ie=edge" />

  <!-- 0. ส่วนแสดง Title ของ Web -->
  <title>Trip</title>


  <!-- 1. เรียกใช้ bootstrap สำหรับตกแต่งหน้า Web -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css"
    integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous" />
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">

  <!-- 3. เรียกใช้ leaflet สำหรับสร้างแผนที่ ส่วนหน้าตาแผนที่ -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.6.0/dist/leaflet.css" />
  <script src="https://unpkg.com/leaflet@1.6.0/dist/leaflet.js"></script>

  <!-- jquery-->
  <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>

  <!-- papaparse-->
  <script src="https://cdn.jsdelivr.net/npm/papaparse@5.4.1/papaparse.min.js"></script>

  <script src=https://github.com/Shirokonii/senior_prj/blob/main/data_acc_geojson.geojson></script>
  <script src=https://github.com/Shirokonii/senior_prj/blob/main/data_res_geojson.geojson></script>
  <script src=https://github.com/Shirokonii/senior_prj/blob/main/data_ta_geojson.geojson></script>
</head>

<!-- หัวข้อกับแผนที่-->
<section>
  <div class="container">
    <div class="content">
      <div class="content_left">
        <h1>Nakhon Nayok Trip Design</h1>
        <p> Lorem ipsum dolor sit amet consectetur adipisicing elit. Voluptates facere magnam asperiores assumenda alias
          nemo, vel similique quasi velit omnis ducimus quibusdam dolorem corrupti distinctio nesciunt dignissimos
          temporibus vitae libero?</p>
      </div>
      <div class="content_right" style="text-align: center" id="map">
        <iframe width="1200" height="900" style="border:0;" allowfullscreen="" loading="lazy"
          referrerpolicy="no-referrer-when-downgrade"></iframe>
      </div>
    </div>
</section>

<!-- คอนเทนต์-->
<style>
  .center-button {
    text-align: center;
  }

  .collapsible {
    background-color: #f1f1f1;
    color: #333;
    cursor: pointer;
    padding: 18px;
    width: 50%;
    text-align: center;
    border: none;
    outline: none;
  }

  .checkbox {
    display: flex;
    align-items: center;
    text-align: center;
    justify-content: center;
  }

  label {
    margin-right: 10px;
    margin-left: 10px;
  }
</style>

<!-- ตัวเลือก-->


<section style="margin-top: 3em;">
  <div class="center-button">
    <button class="collapsible" style='cursor: pointer; font-weight: bold; text-decoration:
      underline;'>ลักษณะการท่องเที่ยว</button>
    <div class="content" style='display: none'>
      <p>This is the content that can be collapsed or expanded.</p>
      <label for="selecttime">ระยะเวลา:</label>
      <select id="selecttime" name="selecttime" onchange="filterGeoJSON()">
        <option value="time0">-</option>
        <option value="time1">1 วัน</option>
        <option value="time2">2-3 วัน</option>
        <option value="time3">4-5 วัน</option>
        <option value="time4">6-7 วัน</option>
        <option value="time5">มากกว่า 7 วัน</option>
      </select>
      <br><label for="selectmember">จำนวนคน:</label>
      <select id="selectmember" name="selectmember" onchange="member1()">
        <option value="member0">-</option>
        <option value="member1">1 คน</option>
        <option value="member2">2-3 คน</option>
        <option value="member3">4-5 คน</option>
        <option value="member4">6-7 คน</option>
        <option value="member5">มากกว่า 7 คน</option>
      </select>
      <br><label for="selecttype">ประเภทกลุ่มนักท่องเที่ยว:</label>
      <select id="selecttype" name="selecttype" onchange="placetype()">
        <option value="type0">-</option>
        <option value="type1">เดินทางคนเดียว</option>
        <option value="type2">ครอบครัว</option>
        <option value="type3">คู่รัก</option>
        <option value="type4">กลุ่มเพื่อน</option>
      </select>
      <br><button class="button" style="margin-top: 1em;" id="apply_type" onclick="apply_type()">Apply</button>
    </div>
  </div>
</section>

<section style="margin-top: 3em;">
  <div class="center-button">
    <button class="collapsible" style=' cursor: pointer; font-weight: bold; text-decoration: underline;'>ที่พัก</button>
    <div class="content" style="display: none">
      <p>This is the content that can be collapsed or expanded.</p>
      <label for="selectprice_ht">ราคา (ต่อคืน):</label>
      <select id="selectprice_ht" name="selectprice_ht" onchange="priceht()">
        <option value="price_hotel0">-</option>
        <option value="price_hotel1">XXX บาท</option>
        <option value="price_hotel2">XXXX บาท</option>
        <option value="price_hotel3">XXXXX บาท</option>
      </select>
      <br><label for="selectstar">ประเภท:</label>
      <select id="selectstar" name="selectstar" onchange='typeht()'>
        <option value="star0">-</option>
        <option value="star1">4 ดาว</option>
        <option value="star2">5 ดาว</option>
        <option value="star3">โรงแรม</option>
        <option value="star4">รีสอร์ท</option>
        <option value="star5">โฮมสเตย์</option>
      </select>
      <br><button class="button" style="margin-top: 1em;" id="apply_acc" onclick='apply_acc()'>Apply</button>
    </div>
  </div>
</section>

<section style="margin-top: 3em;">
  <div class="center-button">
    <button class="collapsible" style='cursor: pointer; font-weight: bold; text-decoration:
    underline;'>ร้านอาหาร</button>
    <div class="content" style="display: none">
      <p>This is the content that can be collapsed or expanded.</p>
      <label for="selectprice_f">ราคา:</label>
      <select id="selectprice_f" name="selectprice_f" onchange="pricefood()">
        <option value="price_food0">-</option>
        <option value="price_food1">XXX บาท</option>
        <option value="price_food2">XXXX บาท</option>
        <option value="price_food3">XXXXX บาท</option>
      </select>
      <br><label for="selectfood">ประเภทร้านอาหาร:</label>
      <select id="selectfood" name="selectfood" onchange='food()'>
        <option value="food0">-</option>
        <option value="food1">อาหารท้องถิ่น</option>
        <option value="food2">อาหารไทย</option>
        <option value="food3">อาหารตะวันตก</option>
        <option value="food4">อาหารตะวันออก</option>
      </select>
      <br><button class="button" style="margin-top: 1em;" id="apply_res" onclick='apply_food()'>Apply</button>
    </div>
  </div>
</section>

<footer>
  <p style="text-align: center;margin-top: 3em;">footer here</p>
</footer>


<!--------------------------------SCRIPT--------------------------------------------------------------------------->

<!-- เปิดปิดปุ่ม-->
<script>
  // Select all elements with the class "collapsible"
  var collapsibleElements = document.querySelectorAll(".collapsible");

  // Add a click event listener to each "collapsible" element
  collapsibleElements.forEach(function (collapsible) {
    collapsible.addEventListener("click", function () {
      var content = this.nextElementSibling;

      // Toggle the display of the content
      if (content.style.display === "block") {
        content.style.display = "none";
      } else {
        content.style.display = "block";
      }
    });
  });


  var markerA;
  var markerB;
  var markerC;
  var latA;
  var latB;
  var latC;
  var lonA;
  var lonB;
  var lonC;
  var popupContentA;
  var popupContentB;
  var popupContentC;
  var toggleMarkers;
  var subsetLayer;
  var markers = [];
  var member;

  var map = L.map('map', {
    center: [14.2074, 101.2139], // EDIT latitude, longitude to re-center map
    zoom: 11,  // EDIT from 1 to 18 -- decrease to zoom out, increase to zoom in
    scrollWheelZoom: true,
    tap: true
  });
  var light = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
    maxZoom: 19,
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
  }).addTo(map); // EDIT - insert or remove ".addTo(map)" before last semicolon to display by default



  var iconTypeA = L.icon({
    iconUrl: 'http://maps.google.com/mapfiles/ms/icons/green-dot.png',
    iconSize: [30, 30],
  });
  var iconTypeB = L.icon({
    iconUrl: 'http://maps.google.com/mapfiles/ms/icons/red-dot.png',
    iconSize: [30, 30],
  });
  var iconTypeC = L.icon({
    iconUrl: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png',
    iconSize: [30, 30],
  });
  var iconTypeD = L.icon({
    iconUrl: 'http://maps.google.com/mapfiles/ms/icons/yellow-dot.png',
    iconSize: [30, 30],
  });



  fetch('https://raw.githubusercontent.com/Shirokonii/senior_prj/main/data_ta_geojson.geojson')
    .then(response => response.json())
    .then(data => {
      // Loop through the features and add markers to the map
      data.features.forEach(feature => {
        latA = feature.geometry.coordinates[1]; // Assuming GeoJSON has a Point geometry
        lonA = feature.geometry.coordinates[0];

        // You can customize the marker popup content here
        popupContentA = `<p>${feature.properties.title}</p>`;

        // Add marker to the map
        //      markerA = L.marker([latA, lonA], { icon: iconTypeB, id: 'marker-type-b' }).addTo(map).bindPopup(popupContentA);
      }
      )
    }
    )
    ;


  fetch('https://raw.githubusercontent.com/Shirokonii/senior_prj/main/data_res_geojson.geojson')
    .then(response => response.json())
    .then(data => {
      // Loop through the features and add markers to the map
      data.features.forEach(feature => {
        latB = feature.geometry.coordinates[1]; // Assuming GeoJSON has a Point geometry
        lonB = feature.geometry.coordinates[0];

        // You can customize the marker popup content here
        var popupContentB = `<p>${feature.properties.title}</p>`;

        // Add marker to the map
        //      markerB = L.marker([latB, lonB], { icon: iconTypeA, id: 'marker-type-a' }).addTo(map).bindPopup(popupContentB);

      }
      )
    }
    )
    ;

  fetch('https://raw.githubusercontent.com/Shirokonii/senior_prj/main/data_acc_geojson.geojson')
    .then(response => response.json())
    .then(data => {
      // Loop through the features and add markers to the map
      data.features.forEach(feature => {
        latC = feature.geometry.coordinates[1]; // Assuming GeoJSON has a Point geometry
        lonC = feature.geometry.coordinates[0];

        // You can customize the marker popup content here
        popupContentC = `<p>${feature.properties.title}</p>`;

        // Add marker to the map
        //       markerC = L.marker([latC, lonC], { icon: iconTypeC, id: 'marker-type-c' }).addTo(map).bindPopup(popupContentC);

      }
      )
    });


  //var startbnk = L.marker([14.084842483317178, 100.91496315027416], { icon: iconTypeD, id: 'marker-type-d' }).addTo(map).bindPopup('กทม');
  //var startsara = L.marker([14.314984504859853, 101.01847289519068], { icon: iconTypeD, id: 'marker-type-d' }).addTo(map).bindPopup('สระบุรี');
  //var startprachin = L.marker([14.14778023151167, 101.27677125111066], { icon: iconTypeD, id: 'marker-type-d' }).addTo(map).bindPopup('ปราจีนบุรี');
  //var startcha = L.marker([13.975694923944612, 101.07595963796163], { icon: iconTypeD, id: 'marker-type-d' }).addTo(map).bindPopup('ฉะเชิงเทรา');
  //var startkorat = L.marker([14.438784115478022, 101.37147470552627], { icon: iconTypeD, id: 'marker-type-d' }).addTo(map).bindPopup('นครราชสีมา');



  fetch('https://raw.githubusercontent.com/Shirokonii/senior_prj/main/road.geojson')
    .then(response => response.json())
    .then(geojsonData => {
      // Add GeoJSON layer to the map
      L.geoJSON(geojsonData).addTo(map);
    })
    .catch(error => console.error('Error fetching GeoJSON:', error));


  // Assume your GeoJSON data is stored in a variable called 'geojsonData'
  var geojsonData_ta = 'https://raw.githubusercontent.com/Shirokonii/senior_prj/main/data_ta_geojson.geojson';
  var geojsonData_acc = 'https://raw.githubusercontent.com/Shirokonii/senior_prj/main/data_acc_geojson.geojson'
  var geojsonData_res = 'https://raw.githubusercontent.com/Shirokonii/senior_prj/main/data_res_geojson.geojson'
  var location1;
  var member11;
  var place1;
  var price1;
  var resortData
  var type
  var markersta = []
  var markersacc = []
  var markersres = []


  function filterGeoJSON() {
    // ดึงค่าจำนวนวันที่เลือก
    var daysDropdown = document.getElementById("selecttime");
    var selectedDays = daysDropdown.value;
    var location;
    clearMarkersta();
    if (selectedDays === 'time1') {
      location = 3;
    } else if (selectedDays === 'time2') {
      location = 6;
    } else if (selectedDays === 'time3') {
      location = 10;
    } else if (selectedDays === 'time4') {
      location = 12;
    } else if (selectedDays === 'time5') {
      location = 15;
    } else {
      // กรณีที่ไม่มีการตรงกับค่าใด ๆ ที่กำหนด
      console.error("Invalid selected");
      return
    };
    location1 = location

  };

  function member1() {
    var members = document.getElementById("selectmember");
    var selectmember = members.value;

    if (selectmember === 'member1') {
      member = 1;
    } else if (selectmember === 'member2') {
      member = 3;
    } else if (selectmember === 'member3') {
      member = 5;
    } else if (selectmember === 'member4') {
      member = 7;
    } else if (selectmember === 'member5') {
      member = 8;
    } else {
      // กรณีที่ไม่มีการตรงกับค่าใด ๆ ที่กำหนด
      console.error("Invalid selected");
      return
    };
    member11 = member
  };

  function placetype() {
    var placetype = document.getElementById("selecttype");
    var selectedtype = placetype.value;
  }
  function applyRandomData() {
    clearMarkersta();

    fetch(geojsonData_ta)
      .then(response => response.json())
      .then(data => {
        // สุ่มเลือกข้อมูลที่ main_categ เป็น "สถานที่ท่องเที่ยว"
        var touristPlacesData = data.features.filter(feature => {
          return feature.properties.main_categ === "สถานที่ท่องเที่ยว";
        });

        // สุ่มเลือกข้อมูลจากชุดข้อมูลที่ได้
        var randomIndex = Math.floor(Math.random(0, 4) * touristPlacesData.length);
        var selectedFeature = touristPlacesData[randomIndex];

        // แสดง marker บนแผนที่
        var markerta = L.marker([selectedFeature.geometry.coordinates[1], selectedFeature.geometry.coordinates[0]], { icon: iconTypeB, id: 'marker-type-a' })
          .addTo(map).bindPopup(`<p>${selectedFeature.properties.title}</p>`);
        markersta.push(markerta); // เก็บ marker เพื่อให้สามารถลบได้
      })
      .catch(error => console.error('Error fetching data:', error));
  }


  function apply_type() {
    clearMarkersta()
    applyRandomData()
    fetch(geojsonData_ta)
      .then(response => response.json())
      .then(data => {
        // เลือกชุดข้อมูล
        var subsetData = data.features.slice(0, location1 + member11);
        // สร้าง LayerGroup เพื่อเก็บข้อมูลที่เลือก
        // Create markers for each feature and add them to the map and the markers array
        subsetData.forEach(feature => {
          var markerta = L.marker([feature.geometry.coordinates[1], feature.geometry.coordinates[0]], { icon: iconTypeB, id: 'marker-type-a' })
            .addTo(map).bindPopup(`<p>${feature.properties.title}</p>`);
          markersta.push(markerta);
        })
      })
  }

  function clearMarkersta() {
    markersta.forEach(markerta => {
      map.removeLayer(markerta); // Remove the marker from the map
    });
    markersta = []; // Clear the markers array
  }
  function clearMarkersacc() {
    markersacc.forEach(markeracc => {
      map.removeLayer(markeracc); // Remove the marker from the map
    });
    markersacc = []; // Clear the markers array
  }
  function clearMarkersres() {
    markersres.forEach(markerres => {
      map.removeLayer(markerres); // Remove the marker from the map
    });
    markersres = []; // Clear the markers array
  }

  function priceht() {
    var selectprice_ht = document.getElementById("selectprice_ht");
    var selectedOption = selectprice_ht.value;
    // ตรวจสอบตัวเลือกที่ถูกเลือกและกรองข้อมูล GeoJSON ตามเงื่อนไข
    if (selectedOption === "price_hotel1") {
      type === 'รีสอร์ท'
    } else if (selectedOption === "price_hotel2") {
      type === 'โรงแรม'
    }
  }

  function typeht() {
    var selecttype_ht = document.getElementById("selectstar");
    var selectedOption = selectprice_ht.value;
    fetch(geojsonData_acc)
      .then(response => response.json())
      .then(data => {
        var data_acc = data.features.filter(feature => {
          var type1 = feature.properties.main_categ
          var type2 = feature.properties.rating
        })
      })
    if (selectedOption === "star1") {
      type2 >= 3 && type2 <= 4
    } else if (selectedOption === "star2") {
      type2 >= 4.1 && type2 <= 5
    } else if (selectedOption === "star3") {
      type1 === 'โรงแรม'
    } else if (selectedOption === "star4") {
      type1 === 'รีสอร์ท'
    } else if (selectedOption === "star5") {
      type1 === 'โฮมสเตย์'
    }
  }

  function apply_acc() {
    clearMarkersacc()
    fetch(geojsonData_acc)
      .then(response => response.json())
      .then(data => {
        // เลือกชุดข้อมูล
        var resortData = data.features.slice(0, 1)
        resortData = data.features.filter(feature => {
          var randomValue = Math.random(0, 1);
          var type = feature.properties.main_categ;
          // ตรวจสอบว่า type เป็น "รีสอร์ท" และสุ่มอยู่ในเงื่อนไขที่ต้องการ
          return type && randomValue < 0.003; // เช่น 50% ของรีสอร์ท
        });
        resortData.forEach(feature => {
          var marker = L.marker([feature.geometry.coordinates[1], feature.geometry.coordinates[0]], { icon: iconTypeC, id: 'marker-type-b' })
            .addTo(map).bindPopup(`<p>${feature.properties.title}</p>`);
          markers.push(marker); // เก็บ marker เพื่อให้สามารถลบได้
        });
      })
      .catch(error => console.error('Error fetching data:', error));
  }

  function pricefood() {
    var selectprice_f = document.getElementById("selectprice_f");
    var selectedOption = selectprice_f.value;
    // ตรวจสอบตัวเลือกที่ถูกเลือกและกรองข้อมูล GeoJSON ตามเงื่อนไข
    if (selectedOption === "price_f1") {
      type === 'ร้านอาหาร'
    } else if (selectedOption === "price_f2") {
      type === 'ร้านอาหารครอบครัว'
    } else if (selectedOption === "price_f3") {
      type === 'ภัตตาคาร'
    }
  }

  function food() {
    var selectfood = document.getElementById("selectfood");
    var selectedOption = selectfood.value;
    fetch(geojsonData_res)
      .then(response => response.json())
      .then(data => {
        var data_res = data.features.filter(feature => {
          var type1 = feature.properties.main_categ
        })
      })
    if (selectedOption === "food1") {
      type1 === 'ร้านอาหาร'
    } else if (selectedOption === "food2") {
      type1 === 'ร้านอาหารครอบครัว'
    } else if (selectedOption === "food3") {
      type1 === 'ภัตตาคาร'
    } else if (selectedOption === "food4") {
      type1 === 'ร้านกาแฟ'
    }
  }
  function food() {
    var selectfood = document.getElementById("selectfood");
    var selectedOption = selectfood.value;
    fetch(geojsonData_res)
      .then(response => response.json())
      .then(data => {
        var data_res = data.features.filter(feature => {
          var type = feature.properties.main_categ
        })
      
    if (selectedOption === "food1") {
      type === 'ร้านอาหาร'
    } else if (selectedOption === "food2") {
      type === 'ร้านอาหารครอบครัว'
    } else if (selectedOption === "food3") {
      type === 'ภัตตาคาร'
    } else if (selectedOption === "food4") {
      type === 'ร้านกาแฟ'
    }
  })}


  
    function apply_food() {
  clearMarkersres();

  fetch(geojsonData_res)
    .then(response => response.json())
    .then(data => {
      // สุ่มเลือกข้อมูลจากชุดข้อมูล
      var randomIndex = Math.floor(Math.random() * data.features.length);
      var selectedFeature = data.features[randomIndex];

      // แสดง marker บนแผนที่
      var markerres = L.marker([selectedFeature.geometry.coordinates[1], selectedFeature.geometry.coordinates[0]], { icon: iconTypeA, id: 'marker-type-a' })
        .addTo(map).bindPopup(`<p>${selectedFeature.properties.title}</p>`);
      markersres.push(markerres); // เก็บ marker เพื่อให้สามารถลบได้
    })
    .catch(error => console.error('Error fetching data:', error));
}
</script>